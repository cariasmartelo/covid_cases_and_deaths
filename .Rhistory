latest_proyections_plot_ny_ca_il <- latest_proyections_us_ny_ca_il %>%
ggplot(aes(x=date, y=deaths_mean)) +
geom_line(aes(color=location_name)) +
geom_vline(xintercept = as.Date('2020-04-20'), linetype = 'dashed') +
ggtitle("Deaths by COVID, Proyections April 20") +
theme_bw()
latest_proyections_us <- latest_proyections %>%
filter(location_name %in% us_states)
# Import latest proyections
latest_proyections <- read_csv(file.path(filepath, '2020_04_20.02.all_Hospitalization_all_locs.csv'))
setwd("~/Google Drive/Escuela/MSCAPP/Q6/covid_gov_responses/covid_cases_and_deaths")
rm(list = ls())
library(tidyverse)
library(gridExtra)
# Set working directory
setwd("~/Google Drive/Escuela/MSCAPP/Q6/covid_gov_responses/covid_cases_and_deaths")
# Change to path where IHME csv's are
filepath <- "data/IHME"
# Import latest proyections
latest_proyections <- read_csv(file.path(filepath, '2020_04_20.02.all_Hospitalization_all_locs.csv'))
# Filter put NON-US
us_states <- c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California',
'Colorado', 'Connecticut','Delaware','Florida','Georgia',
'Hawaii','Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas',
'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts',
'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana',
'Nebraska', 'Nevada', 'New latest_proyecHampshire', 'New Jersey', 'New Mexico',
'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma',
'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina',
'South Dakota', 'Tennessee', 'Texas', 'Utah', 'United States of America',
'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin',
'Wyoming')
latest_proyections_us <- latest_proyections %>%
filter(location_name %in% us_states)
# Create subset for NY, IL and CA
latest_proyections_us_ny_ca_il <- latest_proyections_us %>%
filter(location_name == 'New York' | location_name == 'California' | location_name == 'Illinois')
# Plot
latest_proyections_plot_ny_ca_il <- latest_proyections_us_ny_ca_il %>%
ggplot(aes(x=date, y=deaths_mean)) +
geom_line(aes(color=location_name)) +
geom_vline(xintercept = as.Date('2020-04-20'), linetype = 'dashed') +
ggtitle("Deaths by COVID, Proyections April 20") +
theme_bw()
# Do same proceedure with April 5 proyections
april_5 <- read_csv(file.path(filepath, '2020_04_05.08.all_Hospitalization_all_locs.csv'))
april_5_us <- april_5 %>%
filter(location_name %in% us_states)
april_5_us_ny_ca_il <- april_5_us %>%
filter(location_name == 'New York' | location_name == 'California' | location_name == 'Illinois')
april_5_plot_us_ny_ca_il <- april_5_us_ny_ca_il %>%
ggplot(aes(x=date, y=deaths_mean)) +
geom_line(aes(color=location_name)) +
geom_vline(xintercept = as.Date('2020-04-05'), linetype = 'dashed') +
ggtitle("Deaths by COVID, Proyections April 8") +
theme_bw()
# Show plots
grid.arrange(april_5_proyections_us_ny_ca_il, latest_proyections_plot_ny_ca_il, nrow=2)
# Show plots
grid.arrange(april_5_plot_us_ny_ca_il, latest_proyections_plot_ny_ca_il, nrow=2)
treatment_effect_nc <- lm(endline_wages ~ burlig_trt, data = burlig %>%
filter(baseline_wages > 0))
# Set working directory
setwd("~/Google Drive/Escuela/MSCAPP/Q6/covid_gov_responses/covid_cases_and_deaths")
# Change to path where IHME csv's are
filepath <- "data/IHME"
latest_proyections <- read_csv(file.path(filepath, latest_proyection))
# Import latest proyections
latest_proyection_csv <- '2020_04_20.02.all_Hospitalization_all_locs.csv'
first_proyection_csv <- 'ihme-covid19_ihme-covid19_all_locs.csv'
latest_proyection_csv <- '2020_04_20.02.all_Hospitalization_all_locs.csv'
first_proyection_csv <- 'ihme-covid19_ihme-covid19_all_locs.csv'
latest_proyections <- read_csv(file.path(filepath, latest_proyection_csv))
first_proyections <- read_csv(file.path(filepath, first_proyection_csv))
keep_only_states <- function(df, states){
return_df <- df %>%
filter(location_name %in% states)
}
latest_proyections_us <- keep_only_states(latest_proyections, us_states)
first_proyections_us <- keep_only_states(first_proyections, us_states)
# Plot
states_to_plot <- c("New York", "Illinois", "California")
# Plot
states_to_plot <- c("New York", "Illinois", "California")
latest_proyections_plot<- keep_only_states(latest_proyections_us, states_to_plot) %>%
ggplot(aes(x=date, y=deaths_mean)) +
geom_line(aes(color=location_name)) +
geom_vline(xintercept = as.Date('2020-04-20'), linetype = 'dashed') +
ggtitle("Deaths by COVID, Proyections April 20") +
theme_bw()
#Covid gov Responses
#Script to download latest data from IHME
#
rm(list = ls())
library(tidyverse)
library(gridExtra)
# TO download latest proyections
# source('ihme_data_download.R')
# Set working directory
setwd("~/Google Drive/Escuela/MSCAPP/Q6/covid_gov_responses/covid_cases_and_deaths")
# Change to path where IHME csv's are
filepath <- "data/IHME"
# Import latest proyections
latest_proyection_csv <- '2020_04_20.02.all_Hospitalization_all_locs.csv'
first_proyection_csv <- 'ihme-covid19_ihme-covid19_all_locs.csv'
latest_proyections <- read_csv(file.path(filepath, latest_proyection_csv))
first_proyections <- read_csv(file.path(filepath, first_proyection_csv))
# Filter put NON-US
us_states <- c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California',
'Colorado', 'Connecticut','Delaware','Florida','Georgia',
'Hawaii','Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas',
'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts',
'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana',
'Nebraska', 'Nevada', 'New latest_proyecHampshire', 'New Jersey', 'New Mexico',
'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma',
'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina',
'South Dakota', 'Tennessee', 'Texas', 'Utah', 'United States of America',
'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin',
'Wyoming')
keep_only_states <- function(df, states){
return_df <- df %>%
filter(location_name %in% states)
}
latest_proyections_us <- keep_only_states(latest_proyections, us_states)
first_proyections_us <- keep_only_states(first_proyections, us_states)
# Plot
states_to_plot <- c("New York", "Illinois", "California")
latest_proyections_plot<- keep_only_states(latest_proyections_us, states_to_plot) %>%
ggplot(aes(x=date, y=deaths_mean)) +
geom_line(aes(color=location_name)) +
geom_vline(xintercept = as.Date('2020-04-20'), linetype = 'dashed') +
ggtitle("Deaths by COVID, Proyections April 20") +
theme_bw()
# Do same proceedure with April 5 proyections
first_proyections_plot <- keep_only_states(first_proyections_us, states_to_plot) %>%
ggplot(aes(x=date, y=deaths_mean)) +
geom_line(aes(color=location_name)) +
geom_vline(xintercept = as.Date('2020-04-05'), linetype = 'dashed') +
ggtitle("Deaths by COVID, Proyections April 8") +
theme_bw()
# Show plots
grid.arrange(first_proyections_plot, states_to_plot, nrow=2)
first_proyections_plot
latest_proyections_plot
first_proyections_plot <- keep_only_states(first_proyections_us, states_to_plot) %>%
ggplot(aes(x=date, y=deaths_mean)) +
geom_line(aes(color=location_name)) +
geom_vline(xintercept = as.Date('2020-04-05'), linetype = 'dashed') +
ggtitle("Deaths by COVID, Proyections April 8") +
theme_bw()
first_proyections_plot
first_proyections_us
latest_proyections_plot<- keep_only_states(latest_proyections_us, states_to_plot) %>%
ggplot(aes(x=date, y=deaths_mean)) +
geom_line(aes(color=location_name)) +
geom_vline(xintercept = as.Date('2020-04-20'), linetype = 'dashed') +
ggtitle("Deaths by COVID, Proyections April 20") +
theme_bw()
first_proyections_plot <- keep_only_states(first_proyections_us, states_to_plot) %>%
ggplot(aes(x=date, y=deaths_mean)) +
geom_line(aes(color=location_name)) +
geom_vline(xintercept = as.Date('2020-04-05'), linetype = 'dashed') +
ggtitle("Deaths by COVID, Proyections April 8") +
theme_bw()
first_proyections_plot
keep_only_states(first_proyections_us, states_to_plot)
keep_only_states(first_proyections_us, states_to_plot)
View(keep_only_states(first_proyections_us, states_to_plot))
first_proyections <- first_proyections %>%
rename(date_reported = date)
first_proyections <- first_proyections %>%
rename(date = date_reported)
# Filter put NON-US
us_states <- c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California',
'Colorado', 'Connecticut','Delaware','Florida','Georgia',
'Hawaii','Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas',
'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts',
'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana',
'Nebraska', 'Nevada', 'New latest_proyecHampshire', 'New Jersey', 'New Mexico',
'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma',
'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina',
'South Dakota', 'Tennessee', 'Texas', 'Utah', 'United States of America',
'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin',
'Wyoming')
keep_only_states <- function(df, states){
return_df <- df %>%
filter(location_name %in% states)
}
latest_proyections_us <- keep_only_states(latest_proyections, us_states)
first_proyections_us <- keep_only_states(first_proyections, us_states)
# Plot
states_to_plot <- c("New York", "Illinois", "California")
latest_proyections_plot<- keep_only_states(latest_proyections_us, states_to_plot) %>%
ggplot(aes(x=date, y=deaths_mean)) +
geom_line(aes(color=location_name)) +
geom_vline(xintercept = as.Date('2020-04-20'), linetype = 'dashed') +
ggtitle("Deaths by COVID, Proyections April 20") +
theme_bw()
first_proyections_plot <- keep_only_states(first_proyections_us, states_to_plot) %>%
ggplot(aes(x=date, y=deaths_mean)) +
geom_line(aes(color=location_name)) +
geom_vline(xintercept = as.Date('2020-04-05'), linetype = 'dashed') +
ggtitle("Deaths by COVID, Proyections April 8") +
theme_bw()
View(keep_only_states(first_proyections_us, states_to_plot))
# Show plots
grid.arrange(first_proyections_plot, states_to_plot, nrow=2)
first_proyections_plot
# Show plots
grid.arrange(first_proyections_plot, latest_proyections_plot, nrow=2)
summary(first_proyections_us$date)
summary(latest_proyections_us$date)
View(latest_proyections_us)
View(keep_only_states(latest_proyections_us, c('New York')))
first_proyections <- first_proyections %>%
filter(date > as.date('2020-02-01'))
latest_proyections <- latest_proyections %>%
filter(date > as.date('2020-02-01'))
latest_proyections <- latest_proyections %>%
filter(date > as.Date('2020-02-01'))
first_proyections <- first_proyections %>%
filter(date > as.Date('2020-02-01'))
#Covid gov Responses
#Script to download latest data from IHME
#
rm(list = ls())
library(tidyverse)
library(gridExtra)
# TO download latest proyections
# source('ihme_data_download.R')
# Set working directory
setwd("~/Google Drive/Escuela/MSCAPP/Q6/covid_gov_responses/covid_cases_and_deaths")
# Change to path where IHME csv's are
filepath <- "data/IHME"
# Import latest proyections
latest_proyection_csv <- '2020_04_20.02.all_Hospitalization_all_locs.csv'
first_proyection_csv <- 'ihme-covid19_ihme-covid19_all_locs.csv'
latest_proyections <- read_csv(file.path(filepath, latest_proyection_csv))
latest_proyections <- latest_proyections %>%
filter(date > as.Date('2020-02-01'))
first_proyections <- read_csv(file.path(filepath, first_proyection_csv))
first_proyections <- first_proyections %>%
rename(date = date_reported)
first_proyections <- first_proyections %>%
filter(date > as.Date('2020-02-01'))
# Filter put NON-US
us_states <- c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California',
'Colorado', 'Connecticut','Delaware','Florida','Georgia',
'Hawaii','Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas',
'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts',
'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana',
'Nebraska', 'Nevada', 'New latest_proyecHampshire', 'New Jersey', 'New Mexico',
'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma',
'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina',
'South Dakota', 'Tennessee', 'Texas', 'Utah', 'United States of America',
'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin',
'Wyoming')
keep_only_states <- function(df, states){
return_df <- df %>%
filter(location_name %in% states)
}
latest_proyections_us <- keep_only_states(latest_proyections, us_states)
first_proyections_us <- keep_only_states(first_proyections, us_states)
# Plot
states_to_plot <- c("New York", "Illinois", "California")
latest_proyections_plot<- keep_only_states(latest_proyections_us, states_to_plot) %>%
ggplot(aes(x=date, y=deaths_mean)) +
geom_line(aes(color=location_name)) +
geom_vline(xintercept = as.Date('2020-04-20'), linetype = 'dashed') +
ggtitle("Deaths by COVID, Proyections April 20") +
theme_bw()
# Do same proceedure with April 5 proyections
first_proyections_plot <- keep_only_states(first_proyections_us, states_to_plot) %>%
ggplot(aes(x=date, y=deaths_mean)) +
geom_line(aes(color=location_name)) +
geom_vline(xintercept = as.Date('2020-04-05'), linetype = 'dashed') +
ggtitle("Deaths by COVID, Proyections April 8") +
theme_bw()
summary(first_proyections_us$date)
summary(latest_proyections_us$date)
View(keep_only_states(latest_proyections_us, c('New York')))
# Show plots
grid.arrange(first_proyections_plot, latest_proyections_plot, nrow=2)
# Import latest proyections
start_date <- '2020-02-15'
#Covid gov Responses
#Script to download latest data from IHME
#
rm(list = ls())
library(tidyverse)
library(gridExtra)
# TO download latest proyections
# source('ihme_data_download.R')
# Set working directory
setwd("~/Google Drive/Escuela/MSCAPP/Q6/covid_gov_responses/covid_cases_and_deaths")
# Change to path where IHME csv's are
filepath <- "data/IHME"
# Import latest proyections
start_date <- '2020-02-15'
latest_proyection_csv <- '2020_04_20.02.all_Hospitalization_all_locs.csv'
first_proyection_csv <- 'ihme-covid19_ihme-covid19_all_locs.csv'
latest_proyections <- read_csv(file.path(filepath, latest_proyection_csv))
latest_proyections <- latest_proyections %>%
filter(date > as.Date(start_date))
first_proyections <- read_csv(file.path(filepath, first_proyection_csv))
first_proyections <- first_proyections %>%
rename(date = date_reported)
first_proyections <- first_proyections %>%
filter(date > as.Date(start_date))
# Filter put NON-US
us_states <- c('Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California',
'Colorado', 'Connecticut','Delaware','Florida','Georgia',
'Hawaii','Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas',
'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts',
'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana',
'Nebraska', 'Nevada', 'New latest_proyecHampshire', 'New Jersey', 'New Mexico',
'New York', 'North Carolina', 'North Dakota', 'Ohio', 'Oklahoma',
'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina',
'South Dakota', 'Tennessee', 'Texas', 'Utah', 'United States of America',
'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin',
'Wyoming')
keep_only_states <- function(df, states){
return_df <- df %>%
filter(location_name %in% states)
}
latest_proyections_us <- keep_only_states(latest_proyections, us_states)
first_proyections_us <- keep_only_states(first_proyections, us_states)
# Plot
states_to_plot <- c("New York", "Illinois", "California")
latest_proyections_plot<- keep_only_states(latest_proyections_us, states_to_plot) %>%
ggplot(aes(x=date, y=deaths_mean)) +
geom_line(aes(color=location_name)) +
geom_vline(xintercept = as.Date('2020-04-20'), linetype = 'dashed') +
ggtitle("Deaths by COVID, Proyections April 20") +
theme_bw()
# Do same proceedure with April 5 proyections
first_proyections_plot <- keep_only_states(first_proyections_us, states_to_plot) %>%
ggplot(aes(x=date, y=deaths_mean)) +
geom_line(aes(color=location_name)) +
geom_vline(xintercept = as.Date('2020-04-05'), linetype = 'dashed') +
ggtitle("Deaths by COVID, Proyections April 8") +
theme_bw()
summary(first_proyections_us$date)
summary(latest_proyections_us$date)
View(keep_only_states(latest_proyections_us, c('New York')))
# Show plots
grid.arrange(first_proyections_plot, latest_proyections_plot, nrow=2)
source('~/Google Drive/Escuela/MSCAPP/Q6/covid_gov_responses/covid_cases_and_deaths/ihme_analysis.R')
source('~/Google Drive/Escuela/MSCAPP/Q6/covid_gov_responses/covid_cases_and_deaths/ihme_analysis.R')
source('~/Google Drive/Escuela/MSCAPP/Q6/covid_gov_responses/covid_cases_and_deaths/ihme_analysis.R')
library(tidyverse)
# URL of updated data
current_states <- 'https://covidtracking.com/api/v1/states/current.csv'
download.file(current_states, destfile = file.path(filepath, 'current_states.csv'))
filepath <- "data/testing"
# URL of updated data
current_states <- 'https://covidtracking.com/api/v1/states/current.csv'
download.file(current_states, destfile = file.path(filepath, 'current_states.csv'))
current_states_testing <- read_csv(file.path(filepath, 'current_states.csv'))
View(current_states_testing)
historical_states <- 'https://covidtracking.com/api/v1/states/daily.csv'
download.file(historical_states, destfile = file.path(filepath, 'historical_states.csv'))
historical_states_testing <- read_csv(file.path(filepath, 'historical_states.csv'))
View(historical_states_testing)
historical_states_testing %>%
group_by(state.region) %>%
count()
colnames(historical_states_testing)
historical_states_testing %>%
group_by(state) %>%
count()
historical_states_testing %>%
group_by(state) %>%
summarise(firts_date = min(date), last_date = max(date), n = n())
colnames(historical_states_testing)
View(historical_states_testing)
as.Date(historical_states_testing$date)
historical_states_testing$date
historical_states_testing$date[1]
as.Date(historical_states_testing$date[1])
as.Date(as.character(historical_states_testing$date, '%Y%m%d'))
as.Date(as.character(historical_states_testing$date), '%Y%m%d')
historical_states_testing <- historical_states_testing %>%
mutate(date = as.Date(as.character(date), '%Y%m%d'))
View(historical_states_testing)
View(historical_states_testing)
# Historial summary statistics
historical_states_testing %>%
group_by(state) %>%
summarise(firts_date = min(date), last_date = max(date), n = n())
View(historical_states_testing)
select_states = c('NY', 'IL', 'CA')
colnames(historical_states_testing)
historical_states_testing %>%
filter(state %in% select_states) %>%
ggplot(aes(x=date, y=totalTestResults)) %>%
geom_line(aes(color=state))
historical_states_testing %>%
filter(state %in% select_states) %>%
ggplot(aes(x=date, y=totalTestResults)) +
geom_line(aes(color=state))
select_states = c('NY', 'IL', 'CA', 'NC')
historical_states_testing %>%
filter(state %in% select_states) %>%
ggplot(aes(x=date, y=totalTestResults)) +
geom_line(aes(color=state))
historical_states_testing <- historical_states_testing %>%
mutate(date = as.Date(as.character(date), '%Y%m%d')) %>%
mutate(positive_ratio = positive / totalTestResults)
historical_states_testing %>%
filter(state %in% select_states) %>%
ggplot(aes(x=date, y=positive_ratio)) +
geom_line(aes(color=state))
historical_states_testing <- historical_states_testing %>%
mutate(date = as.Date(as.character(date), '%Y%m%d')) %>%
mutate(positive_ratio = positive / totalTestResults)
# Historial summary statistics
historical_states_testing %>%
group_by(state) %>%
summarise(firts_date = min(date), last_date = max(date), n = n())
historical_states_testing <- historical_states_testing %>%
mutate(date = as.Date(as.character(date), '%Y%m%d')) %>%
mutate(positive_ratio = positive / totalTestResults)
View(historical_states_testing)
# Historial summary statistics
historical_states_testing %>%
group_by(state) %>%
summarise(firts_date = min(date), last_date = max(date), n = n())
historical_states_testing <- read_csv(file.path(filepath, 'historical_states.csv'))
historical_states_testing <- historical_states_testing %>%
mutate(date = as.Date(as.character(date), '%Y%m%d')) %>%
mutate(positive_ratio = positive / totalTestResults)
# Historial summary statistics
historical_states_testing %>%
group_by(state) %>%
summarise(firts_date = min(date), last_date = max(date), n = n())
select_states = c('NY', 'IL', 'CA', 'NC')
historical_states_testing %>%
filter(state %in% select_states) %>%
ggplot(aes(x=date, y=positive_ratio)) +
geom_line(aes(color=state))
historical_states_testing %>%
filter(state %in% select_states) %>%
ggplot(aes(x=date, y=positive_ratio)) +
geom_line(aes(color=state)) +
theme_bw()
historical_states_testing %>%
filter(state %in% select_states) %>%
ggplot(aes(x=date, y=positive_ratio)) +
geom_line(aes(color=state)) +
theme_minimal()
select_states = c('NY', 'IL', 'CA', 'NC', 'FL')
historical_states_testing %>%
filter(state %in% select_states) %>%
ggplot(aes(x=date, y=positive_ratio)) +
geom_line(aes(color=state)) +
theme_minimal()
historical_states_testing %>%
# filter(state %in% select_states) %>%
ggplot(aes(x=date, y=positive_ratio)) +
geom_line(aes(color=state)) +
theme_minimal()
historical_states_testing %>%
filter(state %in% select_states) %>%
ggplot(aes(x=date, y=positive_ratio)) +
geom_line(aes(color=state)) +
theme_minimal()
historical_states_testing %>%
filter(state %in% select_states) %>%
ggplot(aes(x=date, y=totalTestResults)) +
geom_line(aes(color=state)) +
theme_minimal()
historical_states_testing %>%
filter(state %in% select_states) %>%
ggplot(aes(x=date, y=totalTestResultsIncrease)) +
geom_line(aes(color=state)) +
theme_minimal()
View(historical_states_testing)
View(current_states_testing)
A_grade_states <- current_states_testing %>%
filter(score == 'A') %>%
select(state)
A_grade_states
colnames(current_states_testing)
A_grade_states <- current_states_testing %>%
filter(grade == 'A') %>%
select(state)
A_grade_states
A_grade_states <- current_states_testing %>%
filter(grade == 'A') %>%
pull(state)
A_grade_states
historical_states_testing %>%
filter(state %in% A_grade_states) %>%
ggplot(aes(x=date, y=totalTestResultsIncrease)) +
geom_line(aes(color=state)) +
theme_minimal()
historical_states_testing %>%
filter(state %in% A_grade_states) %>%
ggplot(aes(x=date, y=positive_ratio)) +
geom_line(aes(color=state)) +
theme_minimal()
Top_10_states <- current_states_testing %>%
arrange(desc(totalTestResults)) %>%
head(10) %>%
pull(state)
Top_10_states
historical_states_testing %>%
filter(state %in% A_grade_states & state %in% Top_10_states) %>%
ggplot(aes(x=date, y=positive_ratio)) +
geom_line(aes(color=state)) +
theme_minimal()
